# Aplicacion name
APP_NAME=ExampleApp
# Aplicacion domain
APP_DOMAIN_NAME=exampleapp.com
# Aplicacion AI assistant name
AI_ASSISTANT_NAME=ExampleBot

# Application default language
DEFAULT_LANG=en
# DEFAULT_LANG=es

# Application debug (0,1)
APP_DEBUG=0
# APP_DEBUG=1

################################

# Application secret key (to set password encryption)
APP_SECRET_KEY=xxxx

# Application super admin email
APP_SUPERADMIN_EMAIL=xxxx

# Storage seed (to set storage URL encryption -e.g. AWS S3-)
# STORAGE_URL_SEED=xxxx

# Database configuration

# For MongoDB

# Development: Docker container
APP_DB_ENGINE_DEV=MONGO_DB
APP_DB_NAME_DEV=mongo
APP_DB_URI_DEV=mongodb://root:example@127.0.0.1:27017/
APP_CORS_ORIGIN_DEV=*
AWS_S3_CHATBOT_ATTACHMENTS_BUCKET_DEV=exampleapp-chatbot-attachments-dev

# QA: MongoDB Atlas
APP_DB_ENGINE_QA=MONGO_DB
APP_DB_NAME_QA=exampleapp_db_qa
APP_DB_URI_QA=mongodb+srv://<user>:<password>@<cluster>.mongodb.net
APP_CORS_ORIGIN_QA=https://app.exampleapp.local:3000
APP_CORS_ORIGIN_QA_CLOUD=https://app-qa.exampleapp.com
APP_CORS_ORIGIN_QA_LOCAL=https://app.exampleapp.local:3000
AWS_S3_CHATBOT_ATTACHMENTS_BUCKET_QA=exampleapp-chatbot-attachments-qa

# Staging: MongoDB Atlas
APP_DB_ENGINE_STAGING=MONGO_DB
APP_DB_NAME_STAGING=exampleapp_db_staging
APP_DB_URI_STAGING=mongodb+srv://<user>:<password>@<cluster>.mongodb.net
APP_CORS_ORIGIN_STAGING=https://app-staging.exampleapp.com
AWS_S3_CHATBOT_ATTACHMENTS_BUCKET_STAGING=exampleapp-chatbot-attachments-staging

# Production: MongoDB Atlas
APP_DB_ENGINE_PROD=MONGO_DB
APP_DB_NAME_PROD=exampleapp_db_prod
APP_DB_URI_PROD=mongodb+srv://<user>:<password>@<cluster>.mongodb.net
APP_CORS_ORIGIN_PROD=https://app.exampleapp.com
AWS_S3_CHATBOT_ATTACHMENTS_BUCKET_PROD=exampleapp-chatbot-attachments-prod

# Demo: MongoDB Atlas
APP_DB_ENGINE_DEMO=MONGO_DB
APP_DB_NAME_DEMO=exampleapp_db_demo
APP_DB_URI_DEMO=mongodb+srv://<user>:<password>@<cluster>.mongodb.net
APP_CORS_ORIGIN_DEMO=https://app-demo.exampleapp.com
AWS_S3_CHATBOT_ATTACHMENTS_BUCKET_DEMO=exampleapp-chatbot-attachments-demo

# For AWS DynamoDB

# # DEV: docker
# APP_DB_ENGINE_DEV=DYNAMO_DB
# DYNAMDB_PREFIX_DEV=
# APP_DB_URI_DEV=http://localhost:8000

# # QA: AWS DynamoDB
# APP_DB_ENGINE_QA=DYNAMO_DB
# DYNAMDB_PREFIX_QA=
# APP_DB_URI_QA=

# # PROD: AWS DynamoDB
# APP_DB_ENGINE_PROD=DYNAMO_DB
# DYNAMDB_PREFIX_PROD=
# APP_DB_URI_PROD=

# # DEMO: AWS DynamoDB
# APP_DB_ENGINE_DEMO=DYNAMO_DB
# DYNAMDB_PREFIX_DEMO=
# APP_DB_URI_DEMO=

# FDA configuration
FDA_API_KEY=fda_api_key

# OpenAI API key
OPENAI_API_KEY=openai_api_key

# Flask configuration
FLASK_APP=lib/index.py
# FLASK_APP=index.py
FLASK_SECRET_KEY=xxxx

################################

# Current framework options: chalice, flask, fastapi
# CURRENT_FRAMEWORK=chalice
# CURRENT_FRAMEWORK=flask
CURRENT_FRAMEWORK=fastapi

# Local development environment run configuration
# Options are: uvicorn, gunicorn, chalice, chalice_docker
# Chalice case: "chalice" to use http (running without docker) or "chalice_docker" to use https (with docker)
# http:
#RUN_METHOD="chalice"
# https:
# RUN_METHOD="chalice_docker"
# RUN_METHOD="gunicorn"
RUN_METHOD="uvicorn"

# Local run http/https protocol, to have it automatically on the application local running, no user intervention.
RUN_PROTOCOL="http"
# RUN_PROTOCOL="https"
#
# Application main directory
# * FastAPI:
# APP_DIR=app
# * Flask:
# APP_DIR=flaskr
# * Chalice:
# APP_DIR=.
# * Basecamp:
APP_DIR=lib

# JSON configuration files location and git URL
# * FastAPI:
# GIT_SUBMODULE_LOCAL_PATH=flaskr/config_dbdef
# * Flask:
# GIT_SUBMODULE_LOCAL_PATH=flaskr/config_dbdef
# * Chalice and Basecamp:
GIT_SUBMODULE_LOCAL_PATH=lib/config_dbdef
GIT_SUBMODULE_URL=git://github.com/username/configs_repo_name.git

# Frontend application path (to copy version file during big lambdas deployment)
FRONTEND_PATH=../ui

# Local pythoon version
PYTHON_VERSION=3.11.5

# IAAS Cloud provider
CLOUD_PROVIDER=aws

# Enable/disable Cloud Provider secrets (instead of environment variables).
# Available options: `1` to enable, `0` to disable. Defaults to: 1
# GET_SECRETS_ENABLED=0
#
# Fine grained Cloud Provider secrets management:
#
# Enable/disable Cloud Provider envvars.
# Available options: `1` to enable, `0` to disable. Defaults to: 1
# Set to "0" in local development environment so envvars like APP_CORS_ORIGIN can be
# set by the scripts and .env file and access QA resources from DEV.
GET_SECRETS_ENVVARS=0
#
# Enable/disable Cloud Provider critical secrets.
# Available options: `1` to enable, `0` to disable. Defaults to: 1
# Set to "0" in local development environment so envvars like APP_DB_URI can be
# set by the scripts and .env file and access QA resources from DEV.
GET_SECRETS_CRITICAL=0

# AWS Configuration
AWS_S3_BUCKET_NAME_FE=exampleapp-frontend-website-[STAGE]
AWS_REGION=us-east-1
# AWS_API_GATEWAY_STAGE=api
AWS_LAMBDA_FUNCTION_NAME=exampleapp-backend
AWS_LAMBDA_FUNCTION_ROLE_QA=exampleapp-api_handler-role-qa
AWS_LAMBDA_FUNCTION_ROLE_STAGING=exampleapp-api_handler-role-staging
AWS_LAMBDA_FUNCTION_ROLE_PROD=exampleapp-api_handler-role-prod
AWS_LAMBDA_FUNCTION_ROLE_DEMO=exampleapp-api_handler-role-demo
# AWS_SSL_CERTIFICATE_ARN=arn:aws:acm:AWS-REGION:AWS-ACCOUNT:certificate/AWS-CERTIFICATE-UUID

# AI technology (openai/langchain APIs)

# AI_TECHNOLOGY="openai"
AI_TECHNOLOGY="langchain"
#
# Google configuration
GOOGLE_API_KEY=google_console_api_key
GOOGLE_CSE_ID=google_console_cse_key
#
# OpenAI configuration
OPENAI_MODEL=gpt-4o-mini
OPENAI_TEMPERATURE=0.7
#
# Langchain/LangSmith configuration
LANGCHAIN_API_KEY=langchain_api_key
LANGCHAIN_PROJECT=langchain_project
#
# Hugging Face credentials and model URL
HUGGINGFACE_API_KEY=huggingface_api_key
HUGGINGFACE_ENDPOINT_URL=huggingface_endpoint_url

# SMTP Mail configuration
SMTP_SERVER=smtp_server
SMTP_PORT=smtp_port
SMTP_USER=smtp_user
SMTP_PASSWORD=smtp_password
SMTP_DEFAULT_SENDER=sender_email

# Docker configuration
DOCKER_ACCOUNT=docker_account_username

# Minimun kcal formula calculation method
# Options: "hb", "msj", "ck"
# "hb" = Harris-Benedict formula
# "msj" = Mifflin - St Jeor formula
# "ck" = Christian Kosmos formula
MIN_KCAL_FORMULA=ck

# Tests configuration

# Backend debug local port
# BACKEND_DEBUG_LOCAL_PORT=5002

# Testing endpoint
TEST_APP_URL=http://app.exampleapp.local:5002

# Disable local DNS server startup during app run (for offline development)
# LOCAL_DNS_DISABLED=1
# Disable bridge proxy startup during app run (for offline development)
# BRIDGE_PROXY_DISABLED=1

# Container engine: used by the docker run command to run the container
# Available options: `docker`, `podman`. Defaults to: docker
# CONTAINER_ENGINE=docker
# CONTAINER_ENGINE=podman

# Open containers engine app
# Available options: `1` to enable, `0` to disable. Defaults to: 1
# OPEN_CONTAINERS_ENGINE_APP=1
OPEN_CONTAINERS_ENGINE_APP=0

# Check "genericsuite-be-scripts/scripts/link_gs_libs_for_dev.sh"
# BASE_DEVELOPMENT_PATH="/Users/username/path_to_genericsuite_repos/github"

# Local frontend API port
FRONTEND_LOCAL_PORT=3000

# Local backend API port
# Chalice API
# BACKEND_LOCAL_PORT=5001
# FastAPI API
BACKEND_LOCAL_PORT=5011
# Flask API
# BACKEND_LOCAL_PORT=5021
